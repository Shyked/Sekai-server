(function() {

	var fs = require("fs");


	var Loader = function() {
		this.loadedEntities = {};
	};

	Loader.prototype.loadWorldSync = function(worldName) {
		var data = fs.readFileSync("worlds/" + worldName.toLowerCase() + ".json");
		if (!data) {
			console.log(err);
			return null;
		}
		else {
			var worldJSON = JSON.parse(data);
			var loadedEntity;
			if (!worldJSON.entitiesCount) {
				worldJSON.entitiesCount = worldJSON.entities.length;

				for (var idE in worldJSON.entities) {
					if (worldJSON.entities[idE].LOAD) {
						loadedEntity = singleLoader.loadEntitySync(worldJSON.entities[idE].LOAD);
						for (var idP in worldJSON.entities[idE]) {
							if (idP != "LOAD") loadedEntity[idP] = worldJSON.entities[idE][idP];
						}
						worldJSON.entities[idE] = loadedEntity;
					}

					worldJSON.entities[idE].id = idE;
				}

			}
			return worldJSON;
		}
	};

	Loader.prototype.loadEntitySync = function(entityName) {
		if (!this.loadedEntities[entityName]) this.loadedEntities[entityName] = JSON.parse(fs.readFileSync("entities/" + entityName.toLowerCase() + ".json"));
		return this.loadedEntities[entityName];
	};


	var singleLoader = new Loader();
	exports.Loader = singleLoader;


})();