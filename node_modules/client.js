var Clients = function() {

	this.clients = {};
	this.count = 0;

	this.events = {
		new: []
	};

};

Clients.prototype.new = function(id, socket) {
	var newClient = new Client(id, socket);
	this.clients[id] = newClient;
	this.count++;
	this.triggerEvent('new', newClient);
	return newClient;
};

Clients.prototype.delete = function(id) {
	if (id instanceof Client) id = id.id;

	for (var idC in this.clients[id].intervals) {
		clearInterval(this.clients[id].intervals[idC]);
	}

	this.clients[id] = null;
	delete this.clients[id];
	this.count--;
};

Clients.prototype.get = function(id) {
	return this.clients[id];
};


Clients.prototype.broadcast = function(type, content) {
	for (var id in this.clients) {
		this.clients[id].emit(type, content);
	}
};


Clients.prototype.triggerEvent = function(event, result) {
	for (var id in this.events[event]) {
		this.events[event][id](result);
	}
};

Clients.prototype.addEventListener = function(event, func) {
	this.events[event].push(func);
};




var Client = function(id, socket) {

	this.id = id;
	this.socket = socket;

	this.data = {};
	this.intervals = [];

};


Client.prototype.setInterval = function(func, time) {
	this.intervals.push(setInterval(func, time));
}


Client.prototype.emit = function(type, content) {
	this.socket.emit(type, content);
};

Client.prototype.addSocketEvent = function(on, exec) {
	var client = this;
	this.socket.on(on, function(content) { exec(client, content);});
};




exports.Clients = new Clients();